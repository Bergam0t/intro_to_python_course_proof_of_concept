[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "An Introduction to Python for Health",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "hello_world.html",
    "href": "hello_world.html",
    "title": "1  Python Course - Welcome",
    "section": "",
    "text": "Welcome to the intro to Python course!\nWe’ll be working with a browser-based version of Python called ‘Pyodide’ for the course - so you don’t need to install a thing.\nJust look out for the green light at the top of the page - about 15 seconds after you load the page, Pyodide should be ready to go.\nOnce it’s ready, you can click the ‘Run Code’ button to make the code activate - right within your browser, with the output appearing below the code cell! Magic, eh?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow, while some code in this course will be ready to run, a lot won’t be. Usually it will look a bit more like this…\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThere are gaps you need to fill in indicated by ________.\nIf you try running that as-is, you’ll get an error! If you haven’t already, try clicking it now so you know what to expect.\nYou can click into the box to change any and all code that’s written there. For example, in the box below, try changing the name ‘Bob’ to your own name. Don’t worry - it doesn’t get sent anywhere! Make sure you don’t get rid of the quotation marks around the name or it will break…\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow, we’d like you to have a good old go at doing this yourself first.\nIf you get really stuck, you can click on the ‘hint’ box, like the one below, to get unstuck.\n\n\n\n\n\n\nClick here for a hint\n\n\n\n\n\nNow, usually I’d be a great hint for the exercise! But today I’m just a hint about hints.\n\n\n\nBut if you’re really completely stumped, never fear - the solution will be available too.\n\n\n\n\n\n\nClick here for the solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nThere are two more cool things to know about code cells before we get started properly.\nIf you have a go at an exercise and it just doesn’t seem to be going right, you can reset the code without having to refresh the page.\nJust click the little pair of arrows at the top right corner of the code cell. This will reset the code to its original state. Be careful - you can’t undo this!\nBut this is where the second button comes in - the two little boxes on top of each other are your copy button. Clicking that will copy all of the code in the code cell into your clipboard, so you can then paste this anywhere you want - your own notes, perhaps, or you can just keep it safe while you reset the code state.\n\n\n\n\n\n\nWarning\n\n\n\nNow, as much as we’d like to be able to save your progress, that’s not something we can do right now :(\nSo if you want to take any code with you before you exit or refresh, make sure to copy it and put it somewhere safe, like a google doc (or, even better, put it into a .py file and save it somewhere - but we’ll talk more about those some other time)\n\n\n\n\n\n\nProjects\nLater on in the course, there are some extended projects that will allow you to work on a longer piece of code, often bringing together multiple concepts from across the course.\nSo that you don’t lose your work if you close the page, these won’t take place within the book. Instead, there will be a button that loads the exercise in a platform called Deepnote. If you make an account, you can save and return to that exercise whenever you want.\n\n\nReady?\nTime to get started! Use the navigation menu down the left hand side of this page to navigate through the course.\nThanks for joining us - you’ll be ready to use Python for good in no time!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Course - Welcome</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "hello_world.html#ready",
    "href": "hello_world.html#ready",
    "title": "1  Python Course - Welcome",
    "section": "Ready?",
    "text": "Ready?\nTime to get started! Use the navigation menu down the left hand side of this page to navigate through the course.\nThanks for joining us - you’ll be ready to use Python for good in no time!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Course - Welcome</span>"
    ]
  },
  {
    "objectID": "that's_very_variable.html",
    "href": "that's_very_variable.html",
    "title": "2  Your First Python Code",
    "section": "",
    "text": "print()\n\n\n\n\nNow - let’s start where it’s traditional (and useful!) to start - printing an output out!\nWe can do this with the print() function.\nIn Python, a function will always be followed by a pair of brackets. Usually - but not always - you’ll put something in them!\nNow, imagine I wanted to print the word Cat as my output.\nThe way I do this is print(\"cat\")\nNotice that I surrounded the word cat with quotation marks. This is so Python doesn’t start trying to work out what ‘cat’ is - instead it just recognises that it is a string - basically just a bit of text!\nIn this case, we want to print out the following words: This is the first thing I’m printing on the Python course.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Your First Python Code</span>"
    ]
  }
]