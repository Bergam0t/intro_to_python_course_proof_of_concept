[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python for Healthcare Services",
    "section": "",
    "text": "0.1 How the course works\nWe’ll be working with a browser-based version of Python called ‘Pyodide’ for the course - so you don’t need to install a thing.\nJust look out for the green light at the top of the page - about 15 seconds after you load the page, Pyodide should be ready to go.\nOnce it’s ready, you can click the ‘Run Code’ button to make the code activate - right within your browser, with the output appearing below the box of code! Magic, eh?\nWe call these little interactive blocks code cells. So if you see the term ‘cell’ used at any point, that’s what it’s referring to.\nNow, while some code in this course will be ready to run, a lot won’t be. Usually it will look a bit more like the cell below. There are gaps you need to fill in indicated by ________.\nIf you try running that as-is, you’ll get an error!\nIf you haven’t already, try clicking it now so you know what to expect.\nYou can click into the code cell to change any and all code that’s written there. For example, in the box below, try changing the name ‘Bob’ to your own name. Don’t worry - it doesn’t get sent anywhere! Make sure you don’t get rid of the quotation marks around the name or it will break…\nNow, we’d like you to have a good old go at doing this yourself first.\nIf you get really stuck, you can click on the ‘hint’ box, like the one below, to get unstuck.\nBut if you’re really completely stumped, never fear - the solution will be available too.\nThere are two more cool things to know about code cells before we get started properly.\nIf you have a go at an exercise and it just doesn’t seem to be going right, you can reset the code without having to refresh the page.\nJust click the little pair of arrows at the top right corner of the code cell. This will reset the code to its original state. Be careful - you can’t undo this!\nBut this is where the second button comes in - the two little boxes on top of each other are your copy button. Clicking that will copy all of the code in the code cell into your clipboard, so you can then paste this anywhere you want - your own notes, perhaps, or you can just keep it safe while you reset the code state.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "index.html#how-the-course-works",
    "href": "index.html#how-the-course-works",
    "title": "Python for Healthcare Services",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nClick here for a hint\n\n\n\n\n\nNow, usually I’d be a great hint for the exercise! But today I’m just a hint about hints.\n\n\n\n\n\n\n\n\n\n\nClick here for the solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNow, as much as we’d like to be able to save your progress, that’s not something we can do right now :(\nSo if you want to take any code with you before you exit or refresh, make sure to copy it and put it somewhere safe, like a google doc (or, even better, put it into a .py file and save it somewhere - but we’ll talk more about those some other time)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "that's_very_variable.html",
    "href": "that's_very_variable.html",
    "title": "2  Your First Python Code",
    "section": "",
    "text": "Welcome to the first page of the course! Click on the headings below to move through the different exercises.\n\nprint()VariablesDoing the Hard Work for You!\n\n\n\n\nNow - let’s start where it’s traditional (and useful!) to start - printing an output out!\nWe can do this with the print() function.\nIn Python, a function will always be followed by a pair of brackets. Usually - but not always - you’ll put something in them!\nNow, imagine I wanted to print the word dog as my output.\nThe way I do this is print(\"dog\")\nNotice that I surrounded the word dog with quotation marks. This is so Python doesn’t start trying to work out what ‘cat’ is - instead it just recognises that it is a string - basically just a bit of text!\n\n\nPrint out the following words: This is the first thing I’m printing on the Python course.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nClick here for a hint\n\n\n\n\n\nRemember - you need to follow the structure print(\"the words I want to print\")\nMake sure you wrap your words in quotation marks inside the brackets!\n\n\n\n\n\n\n\n\n\nClick here for the solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\nOften when you are doing some code, you’ll want to be able to refer to the same thing multiple times - but not have to write it out each time.\nFor example, you might want to be able to store the identifier for a patient, then lookup several different bits of information about the same patient. Or maybe you want to set some start and end dates and run several queries against a database, using the same dates each time.\nIf we write these out manually each time, there’s a good chance we’ll make a mistake at some point. And the next time we want to do this in our code? We need to make sure we change it absolutely everywhere. Is there a better way?\nWell, we can use things called variables. That way we only have to set something - say start_date - once, and then every time we want to use our start_date in our code, we just need to refer back to start_date rather than writing out the full date every single time.\nSo how can we do this? We can use an equals sign to assign the value of something to some kind of identifier like start_date or name.\nFor example, I could write\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nto create a variable called name with a value of Bob.\nNotice that our variable - name - doesn’t have quotation marks around it. This is important!\nBut we do have quotation marks around Bob. That’s because we need to tell Python that Bob is a string - a bit of text.\nThe magic is now I can print the value of the variable - and it doesn’t print out name. Instead, it prints out Bob - because by assigning the value Bob to name, Python now knows that we actually want Bob!\n(Note - you need to run the cell above first, or you’ll get an error when you try to run the next cell!)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow this starts getting really powerful when we use it multiple times throughout our code.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThe author of this course has a very daft dog called Monty. So let’s assign his name to the variable dog.\nWe’ll then compare what happens when we run print(\"dog\") and print(dog).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nClick here for a hint\n\n\n\n\n\nRemember - \"monty\" is different to monty.\nYou can use single quotation marks or double as long as they match.\n\"dog\" or 'dog' will work.\nIf you try copying and pasting quotation marks in from a program like Word, they might be ‘curly’ quotes - ones that have been made prettier for a document - and code doesn’t like that! This is something to watch out for further down the line.\n\n\n\n\n\n\n\n\n\nClick here for the solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\nSo now we know a very useful thing - how to print an output.\nYou’ll actually use this a lot, particularly in your early scripts - it’s how you get Python to actually give you the results of your calculation! For example, generally if we just run the code 2 + 2, Python will do the calculation, but not tell us the answer. Not very helpful.\nHowever, let’s see what happens if we tell it to print that.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nClever, eh? And notice something important - we didn’t put quotation marks around 2+2 when we put it in the print statement. This is because print is actually pretty smart - you can put more than just a string in your print statement and Python will work out what to do with it.\nIn comparison, if we put print in quotes, we’d get this output instead.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPython can do any kind of sum for us! So let’s get Python to do a slightly more complex one for us.\n\n\nCan you get Python to calculate 5 + 4 times 20 and print out the answer?\nWe’re expecting the answer to be 85!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nClick here for a hint\n\n\n\n\n\nIn Python\n+ means plus\n- is minus\n* is multiply (e.g. 4 * 2 will equal 8)\n/ is divide (e.g. 8 / 2 will equal 4)\n^ is 'to the power of' (e.g. 2^3 is 2 * 2 * 2, which will equal 8)\n\n\n\n\n\n\n\n\n\nClick here for the solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Your First Python Code</span>"
    ]
  }
]